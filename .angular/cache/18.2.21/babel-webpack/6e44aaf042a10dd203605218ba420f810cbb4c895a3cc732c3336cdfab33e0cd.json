{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    http;\n    // Replace with your actual API URL\n    apiUrl = 'https://your-api-domain.com/api';\n    // Common HTTP headers\n    httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      })\n    };\n    constructor(http) {\n      this.http = http;\n    }\n    /**\n     * Create a new user account\n     * @param signupData - User signup information\n     * @returns Observable<AuthResponse>\n     */\n    createAccount(signupData) {\n      return this.http.post(`${this.apiUrl}/register`, signupData, this.httpOptions);\n    }\n    /**\n     * Login user\n     * @param loginData - User login credentials\n     * @returns Observable<AuthResponse>\n     */\n    login(loginData) {\n      return this.http.post(`${this.apiUrl}/login`, loginData, this.httpOptions);\n    }\n    /**\n     * Logout user\n     * @returns Observable<any>\n     */\n    logout() {\n      const token = this.getToken();\n      const headers = new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      });\n      return this.http.post(`${this.apiUrl}/logout`, {}, {\n        headers\n      });\n    }\n    /**\n     * Save authentication token to localStorage\n     * @param token - JWT token\n     */\n    saveToken(token) {\n      localStorage.setItem('auth_token', token);\n    }\n    /**\n     * Get authentication token from localStorage\n     * @returns string | null\n     */\n    getToken() {\n      return localStorage.getItem('auth_token');\n    }\n    /**\n     * Remove authentication token\n     */\n    removeToken() {\n      localStorage.removeItem('auth_token');\n    }\n    /**\n     * Check if user is authenticated\n     * @returns boolean\n     */\n    isAuthenticated() {\n      const token = this.getToken();\n      return token !== null && token !== '';\n    }\n    /**\n     * Verify email address\n     * @param token - Email verification token\n     * @returns Observable<any>\n     */\n    verifyEmail(token) {\n      return this.http.post(`${this.apiUrl}/verify-email`, {\n        token\n      }, this.httpOptions);\n    }\n    /**\n     * Request password reset\n     * @param email - User email\n     * @returns Observable<any>\n     */\n    requestPasswordReset(email) {\n      return this.http.post(`${this.apiUrl}/forgot-password`, {\n        email\n      }, this.httpOptions);\n    }\n    /**\n     * Reset password\n     * @param token - Password reset token\n     * @param newPassword - New password\n     * @returns Observable<any>\n     */\n    resetPassword(token, newPassword) {\n      return this.http.post(`${this.apiUrl}/reset-password`, {\n        token,\n        password: newPassword\n      }, this.httpOptions);\n    }\n    static ɵfac = function AuthService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || AuthService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}